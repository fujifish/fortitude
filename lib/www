#!/usr/bin/env node

var http = require('http');
var passport = require('passport');
var LocalAPIKeyStrategy = require('passport-localapikey').Strategy;
var UsernamePasswordStrategy = require('passport-local').Strategy;
var fortitude = require('./fortitude');

passport.use(new LocalAPIKeyStrategy(
  function(apikey, done) {
    //User.findOne({ apikey: apikey }, function (err, user) {
    //  if (err) { return done(err); }
    //  if (!user) { return done(null, false); }
    //  return done(null, user);
    //});
  }
));

passport.use(new UsernamePasswordStrategy(
  function(username, password, done) {

    //User.findOne({ username: username }, function(err, user) {
    //  if (err) { return done(err); }
    //  if (!user) {
    //    return done(null, false, { message: 'Incorrect username.' });
    //  }
    //  if (!user.validPassword(password)) {
    //    return done(null, false, { message: 'Incorrect password.' });
    //  }
    //  return done(null, user);
    //});
  }
));


// initialize the fortitude express app
var app = fortitude({
  authConfig: function(app) {
    app.use(passport.initialize());
    app.use('/api', authenticateUser);
    app.use('/agent', authenticateApi);
  }
});

function authenticateUser(req, res, next) {
  next();
}

function authenticateApi(req, res, next) {
  next();
}

var server = http.createServer(app);

var port = parseInt(process.env.FORTITUDE_PORT || '3005');

server.listen(port);

server.on('error', function(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(port + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(port + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
});

server.on('listening', function() {
  console.log('Listening on port ' + port);
});


